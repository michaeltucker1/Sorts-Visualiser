{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\micha\\\\Documents\\\\dev\\\\sorting\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Slider from '@mui/material/Slider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [numbersToSort, setNumbersToSort] = useState([]);\n  const [lengthOfArray, setLengthOfArray] = useState(40);\n  const [bars, setBars] = useState([]); //When the length of Array is changed by the slider, a new array will be generated with the new length \n\n  useEffect(() => {\n    generateArray(lengthOfArray);\n  }, [lengthOfArray]); //Generates an array with random integers\n\n  const generateArray = length => {\n    let tempArray = [];\n\n    for (let i = 0; i < length; i++) {\n      var randomInteger = Math.round(20 + Math.random() * (200 - 20));\n      tempArray.push(randomInteger);\n    }\n\n    setNumbersToSort(tempArray);\n  }; //Conducts a bubble sort on an array\n\n\n  const bubbleSort = arr => {\n    for (var i = 0; i < arr.length; i++) {\n      // Last i elements are already in place  \n      for (var j = 0; j < arr.length - i - 1; j++) {\n        // Checking if the item at present iteration \n        // is greater than the next iteration\n        if (arr[j] > arr[j + 1]) {\n          // If the condition is true then swap them\n          var temp = arr[j];\n          arr[j] = arr[j + 1];\n          arr[j + 1] = temp;\n        }\n      }\n    }\n\n    setNumbersToSort([...arr]);\n  };\n\n  function generatebars() {\n    let num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 20;\n\n    //for loop to generate 20 bars\n    for (let i = 0; i < num; i += 1) {\n      // To generate random values from 1 to 100\n      const value = Math.floor(Math.random() * 100) + 1; // To create element \"div\"\n\n      const bar = document.createElement(\"div\"); // To add class \"bar\" to \"div\"\n\n      bar.classList.add(\"bar\"); // Provide height to the bar\n\n      bar.style.height = `${value * 3}px`; // Translate the bar towards positive X axis \n\n      bar.style.transform = `translateX(${i * 30}px)`; // To create element \"label\"\n\n      const barLabel = document.createElement(\"label\"); // To add class \"bar_id\" to \"label\"\n\n      barLabel.classList.add(\"bar_id\"); // Assign value to \"label\"\n\n      barLabel.innerHTML = value; // Append \"Label\" to \"div\"\n\n      bar.appendChild(barLabel); // Append \"div\" to \"data-container div\"\n\n      container.appendChild(bar);\n    }\n  } //Handles changing the value of the slider\n\n\n  const handleChange = (event, newValue) => {\n    setLengthOfArray(newValue);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        bubbleSort(numbersToSort);\n      },\n      children: \"Bubble Sort\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: lengthOfArray\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Slider, {\n      defaultValue: 40,\n      \"aria-label\": \"Default\",\n      valueLabelDisplay: \"auto\",\n      onChange: handleChange,\n      min: 20,\n      max: 200\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: numbersToSort.map((number, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: number\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"cXhj1c+q3MIV/tXmFDrT01Fysys=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/micha/Documents/dev/sorting/src/App.js"],"names":["React","useState","useEffect","useRef","Slider","App","numbersToSort","setNumbersToSort","lengthOfArray","setLengthOfArray","bars","setBars","generateArray","length","tempArray","i","randomInteger","Math","round","random","push","bubbleSort","arr","j","temp","generatebars","num","value","floor","bar","document","createElement","classList","add","style","height","transform","barLabel","innerHTML","appendChild","container","handleChange","event","newValue","map","number","index"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport Slider from '@mui/material/Slider';\n\n\nfunction App() {\n\n  const [numbersToSort, setNumbersToSort] = useState([])\n  const [lengthOfArray, setLengthOfArray] = useState(40)\n  const [bars, setBars] = useState([])\n\n  //When the length of Array is changed by the slider, a new array will be generated with the new length \n  useEffect(() => {\n    generateArray(lengthOfArray)\n  }, [lengthOfArray])\n\n  //Generates an array with random integers\n  const generateArray = (length) => {\n    let tempArray = []\n    for (let i = 0; i < length; i++) {\n      var randomInteger = Math.round(20 + (Math.random() * (200 - 20)))\n      tempArray.push(randomInteger)\n    }\n    setNumbersToSort(tempArray)\n  }\n\n  //Conducts a bubble sort on an array\n  const bubbleSort = (arr) => {\n\n    for (var i = 0; i < arr.length; i++) {\n\n      // Last i elements are already in place  \n      for (var j = 0; j < (arr.length - i - 1); j++) {\n\n        // Checking if the item at present iteration \n        // is greater than the next iteration\n\n        if (arr[j] > arr[j + 1]) {\n\n          // If the condition is true then swap them\n          var temp = arr[j]\n          arr[j] = arr[j + 1]\n          arr[j + 1] = temp\n        }\n      }\n    }\n\n    setNumbersToSort([...arr])\n  }\n\n  function generatebars(num = 20) {\n    \n    //for loop to generate 20 bars\n    for (let i = 0; i < num; i += 1) {\n    \n      // To generate random values from 1 to 100\n      const value = Math.floor(Math.random() * 100) + 1; \n        \n      // To create element \"div\"\n      const bar = document.createElement(\"div\");\n    \n      // To add class \"bar\" to \"div\"\n      bar.classList.add(\"bar\");\n    \n      // Provide height to the bar\n      bar.style.height = `${value * 3}px`;\n    \n      // Translate the bar towards positive X axis \n      bar.style.transform = `translateX(${i * 30}px)`;\n        \n      // To create element \"label\"\n      const barLabel = document.createElement(\"label\");\n    \n      // To add class \"bar_id\" to \"label\"\n      barLabel.classList.add(\"bar_id\");\n    \n      // Assign value to \"label\"\n      barLabel.innerHTML = value;\n        \n      // Append \"Label\" to \"div\"\n      bar.appendChild(barLabel);\n    \n      // Append \"div\" to \"data-container div\"\n      container.appendChild(bar);\n    }\n  }\n\n  //Handles changing the value of the slider\n  const handleChange = (event, newValue) => {\n    setLengthOfArray(newValue);\n  };\n\n  return (\n    <div className=\"App\">\n      <button onClick={() => { bubbleSort(numbersToSort) }}>Bubble Sort</button>\n\n      <h1>{lengthOfArray}</h1>\n      <Slider defaultValue={40} aria-label=\"Default\" valueLabelDisplay=\"auto\" onChange={handleChange} min={20} max={200} />\n      <ul>\n        {numbersToSort.map((number, index) => (\n          <li key={index} >{number}</li>\n\n        ))}\n      </ul>\n\n\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}