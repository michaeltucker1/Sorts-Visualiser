{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\micha\\\\Documents\\\\dev\\\\sorting\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Slider from '@mui/material/Slider';\nimport \"./index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [numbersToSort, setNumbersToSort] = useState([]);\n  const [lengthOfArray, setLengthOfArray] = useState(40);\n  const barsRef = useRef();\n\n  function wait(ms) {\n    var start = new Date().getTime();\n    var end = start;\n\n    while (end < start + ms) {\n      end = new Date().getTime();\n    }\n  } //When the length of Array is changed by the slider, a new array will be generated with the new length \n\n\n  useEffect(() => {\n    generateArray(lengthOfArray); // console.log(barsRef.current.childNodes[0].style.backgroundColor)\n  }, [lengthOfArray]); //Generates an array with random integers\n\n  const generateArray = length => {\n    let tempArray = [];\n\n    for (let i = 0; i < length; i++) {\n      var randomInteger = Math.round(20 + Math.random() * (200 - 20));\n      tempArray.push(randomInteger);\n    }\n\n    setNumbersToSort(tempArray);\n  }; //Conducts a bubble sort on an array\n\n\n  const bubbleSort = arr => {\n    const listOfBars = barsRef.current.childNodes;\n\n    for (var i = 0; i < arr.length; i++) {\n      // Last i elements are already in place  \n      for (var j = 0; j < arr.length - i - 1; j++) {\n        // Checking if the item at present iteration \n        // is greater than the next iteration\n        if (arr[j] > arr[j + 1]) {\n          barsRef.current.childNodes[j].style.backgroundColor = \"green\";\n          wait(1000);\n          barsRef.current.childNodes[j + 1].style.backgroundColor = \"red\";\n          wait(1000); // If the condition is true then swap them\n\n          var temp = arr[j];\n          arr[j] = arr[j + 1];\n          arr[j + 1] = temp;\n          barsRef.current.childNodes[j].style.backgroundColor = \"blue\";\n          barsRef.current.childNodes[j + 1].style.backgroundColor = \"blue\";\n          wait(1000);\n        }\n      }\n    }\n\n    setNumbersToSort([...arr]);\n  }; //Handles changing the value of the slider\n\n\n  const handleChange = (event, newValue) => {\n    setLengthOfArray(newValue);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        bubbleSort(numbersToSort);\n      },\n      children: \"Bubble Sort\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: lengthOfArray\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Slider, {\n      defaultValue: 40,\n      \"aria-label\": \"Default\",\n      valueLabelDisplay: \"auto\",\n      onChange: handleChange,\n      min: 20,\n      max: 200\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      ref: barsRef,\n      style: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        marginLeft: \"-40px\"\n      },\n      children: numbersToSort.map((number, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          backgroundColor: 'blue',\n          width: \"15px\",\n          height: `${2 * number}px`,\n          margin: \"2px\"\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"lQrmA+9sC+eCU0KiKtoYWr1d82o=\");\n\n_c = App;\nexport default App; //console.log(barsRef.current.childNodes[0])\n//const listOfBars = barsRef.current.childNodes\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/micha/Documents/dev/sorting/src/App.js"],"names":["React","useState","useEffect","useRef","Slider","App","numbersToSort","setNumbersToSort","lengthOfArray","setLengthOfArray","barsRef","wait","ms","start","Date","getTime","end","generateArray","length","tempArray","i","randomInteger","Math","round","random","push","bubbleSort","arr","listOfBars","current","childNodes","j","style","backgroundColor","temp","handleChange","event","newValue","display","justifyContent","marginLeft","map","number","index","width","height","margin"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport Slider from '@mui/material/Slider';\nimport \"./index.css\"\n\n\n\nfunction App() {\n\n  const [numbersToSort, setNumbersToSort] = useState([])\n  const [lengthOfArray, setLengthOfArray] = useState(40)\n  const barsRef = useRef()\n\n  function wait(ms) {\n    var start = new Date().getTime();\n    var end = start;\n    while (end < start + ms) {\n      end = new Date().getTime();\n    }\n  }\n\n  //When the length of Array is changed by the slider, a new array will be generated with the new length \n  useEffect(() => {\n    generateArray(lengthOfArray)\n    // console.log(barsRef.current.childNodes[0].style.backgroundColor)\n  }, [lengthOfArray])\n\n  //Generates an array with random integers\n  const generateArray = (length) => {\n    let tempArray = []\n    for (let i = 0; i < length; i++) {\n      var randomInteger = Math.round(20 + (Math.random() * (200 - 20)))\n      tempArray.push(randomInteger)\n    }\n    setNumbersToSort(tempArray)\n  }\n\n  //Conducts a bubble sort on an array\n  const bubbleSort = (arr) => {\n    const listOfBars = barsRef.current.childNodes\n    for (var i = 0; i < arr.length; i++) {\n\n      // Last i elements are already in place  \n      for (var j = 0; j < (arr.length - i - 1); j++) {\n\n        // Checking if the item at present iteration \n        // is greater than the next iteration\n\n        if (arr[j] > arr[j + 1]) {\n          barsRef.current.childNodes[j].style.backgroundColor = \"green\"\n          wait(1000)\n          barsRef.current.childNodes[j + 1].style.backgroundColor = \"red\"\n          wait(1000)\n          // If the condition is true then swap them\n          var temp = arr[j]\n          arr[j] = arr[j + 1]\n          arr[j + 1] = temp\n\n          barsRef.current.childNodes[j].style.backgroundColor = \"blue\"\n          barsRef.current.childNodes[j + 1].style.backgroundColor = \"blue\"\n          wait(1000)\n\n        }\n\n      }\n    }\n\n    setNumbersToSort([...arr])\n  }\n\n\n  //Handles changing the value of the slider\n  const handleChange = (event, newValue) => {\n    setLengthOfArray(newValue);\n  };\n\n  return (\n    <div className=\"App\">\n      <button onClick={() => { bubbleSort(numbersToSort) }}>Bubble Sort</button>\n\n      <h1>{lengthOfArray}</h1>\n\n      <Slider defaultValue={40} aria-label=\"Default\" valueLabelDisplay=\"auto\" onChange={handleChange} min={20} max={200} />\n\n      {/* Displays list of styled bar's  */}\n      <ul ref={barsRef} style={{ display: \"flex\", justifyContent: \"center\", marginLeft: \"-40px\" }}>\n        {numbersToSort.map((number, index) => (\n          < div key={index} style={{ backgroundColor: 'blue', width: \"15px\", height: `${2 * number}px`, margin: \"2px\" }}></div>\n        ))\n        }\n      </ul >\n\n    </div >\n  );\n}\n\nexport default App;\n\n\n//console.log(barsRef.current.childNodes[0])\n//const listOfBars = barsRef.current.childNodes"]},"metadata":{},"sourceType":"module"}