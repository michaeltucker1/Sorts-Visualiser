{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\micha\\\\Documents\\\\dev\\\\sorting\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Slider from '@mui/material/Slider';\nimport \"./index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [numbersToSort, setNumbersToSort] = useState([]);\n  const [lengthOfArray, setLengthOfArray] = useState(40);\n  const barsRef = useRef();\n  const [speed, setSpeed] = useState();\n  const [isSorting, setIsSorting] = useState(false);\n  const [isSorted, setIsSorted] = useState(false);\n\n  const sleep = milliseconds => {\n    return new Promise(resolve => setTimeout(resolve, milliseconds));\n  }; //When the length of Array is changed by the slider, a new array will be generated with the new length \n\n\n  useEffect(() => {\n    generateArray(lengthOfArray);\n  }, [lengthOfArray]); //Generates an array with random integers\n\n  const generateArray = length => {\n    let tempArray = [];\n\n    for (let i = 0; i < length; i++) {\n      var randomInteger = Math.round(20 + Math.random() * (200 - 20));\n      tempArray.push(randomInteger);\n    }\n\n    setNumbersToSort(tempArray);\n    setIsSorted(false);\n  }; //Conducts a bubble sort on an array\n\n\n  const bubbleSort = async arr => {\n    if (isSorting === false) {\n      for (var i = 0; i < arr.length; i++) {\n        // Last i elements are already in place  \n        for (var j = 0; j < arr.length - i - 1; j++) {\n          // Checking if the item at present iteration \n          // is greater than the next iteration\n          if (arr[j] > arr[j + 1]) {\n            barsRef.current.childNodes[j].style.backgroundColor = \"green\";\n            barsRef.current.childNodes[j + 1].style.backgroundColor = \"red\";\n            await sleep(speed); // If the condition is true then swap them\n\n            var temp = arr[j];\n            arr[j] = arr[j + 1];\n            arr[j + 1] = temp;\n            barsRef.current.childNodes[j].style.backgroundColor = \"blue\";\n            barsRef.current.childNodes[j + 1].style.backgroundColor = \"blue\";\n            setNumbersToSort([...arr]);\n          } else {\n            barsRef.current.childNodes[j].style.backgroundColor = \"green\";\n            barsRef.current.childNodes[j + 1].style.backgroundColor = \"green\";\n            await sleep(speed);\n            barsRef.current.childNodes[j].style.backgroundColor = \"blue\";\n            barsRef.current.childNodes[j + 1].style.backgroundColor = \"blue\";\n          }\n        }\n      }\n\n      setIsSorting(false);\n      setIsSorted(true);\n\n      for (var index = 0; index < arr.length; index++) {\n        barsRef.current.childNodes[index].style.backgroundColor = \"green\";\n      }\n    }\n  }; //Handles changing the value of the slider\n\n\n  const handleLengthChange = (event, newValue) => {\n    for (var i = 0; i < numbersToSort.length; i++) {\n      barsRef.current.childNodes[i].style.backgroundColor = \"blue\";\n    }\n\n    setLengthOfArray(newValue);\n  }; // const handleSpeedChange = (event, newValue) => {\n  //   console.log(newValue)\n  //   if (newValue === 1) {\n  //     setSpeed(5000)\n  //   } else if (newValue === 2) {\n  //     setSpeed(2000);\n  //   } else { \n  //     setSpeed(100) \n  //   };\n  //   setSpeed(newValue);\n  // };\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        if (isSorted == false) {\n          bubbleSort(numbersToSort);\n        }\n\n        ;\n        setIsSorting(true);\n      },\n      children: \"Bubble Sort\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: lengthOfArray\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Slider, {\n      defaultValue: 40,\n      \"aria-label\": \"Default\",\n      valueLabelDisplay: \"auto\",\n      onChange: handleLengthChange,\n      min: 20,\n      max: 100\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      ref: barsRef,\n      style: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        marginLeft: \"-40px\"\n      },\n      children: numbersToSort.map((number, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          backgroundColor: 'blue',\n          width: \"15px\",\n          height: `${2 * number}px`,\n          margin: \"2px\"\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"ToKk+HWffOqW3zn9S2Vi+FTmvk8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/micha/Documents/dev/sorting/src/App.js"],"names":["React","useState","useEffect","useRef","Slider","App","numbersToSort","setNumbersToSort","lengthOfArray","setLengthOfArray","barsRef","speed","setSpeed","isSorting","setIsSorting","isSorted","setIsSorted","sleep","milliseconds","Promise","resolve","setTimeout","generateArray","length","tempArray","i","randomInteger","Math","round","random","push","bubbleSort","arr","j","current","childNodes","style","backgroundColor","temp","index","handleLengthChange","event","newValue","display","justifyContent","marginLeft","map","number","width","height","margin"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport Slider from '@mui/material/Slider';\nimport \"./index.css\"\n\n\n\nfunction App() {\n\n  const [numbersToSort, setNumbersToSort] = useState([])\n  const [lengthOfArray, setLengthOfArray] = useState(40)\n  const barsRef = useRef()\n  const [speed, setSpeed] = useState()\n  const [isSorting, setIsSorting] = useState(false)\n  const [isSorted, setIsSorted] = useState(false)\n\n  const sleep = (milliseconds) => {\n    return new Promise(resolve => setTimeout(resolve, milliseconds))\n  }\n  //When the length of Array is changed by the slider, a new array will be generated with the new length \n  useEffect(() => {\n    generateArray(lengthOfArray)\n  }, [lengthOfArray])\n\n  //Generates an array with random integers\n  const generateArray = (length) => {\n    let tempArray = []\n    for (let i = 0; i < length; i++) {\n      var randomInteger = Math.round(20 + (Math.random() * (200 - 20)))\n      tempArray.push(randomInteger)\n    }\n    setNumbersToSort(tempArray)\n    setIsSorted(false)\n  }\n\n  //Conducts a bubble sort on an array\n  const bubbleSort = async (arr) => {\n    if (isSorting === false) {\n      for (var i = 0; i < arr.length; i++) {\n\n        // Last i elements are already in place  \n        for (var j = 0; j < (arr.length - i - 1); j++) {\n\n          // Checking if the item at present iteration \n          // is greater than the next iteration\n\n          if (arr[j] > arr[j + 1]) {\n\n            barsRef.current.childNodes[j].style.backgroundColor = \"green\"\n            barsRef.current.childNodes[j + 1].style.backgroundColor = \"red\"\n            await sleep(speed)\n            // If the condition is true then swap them\n            var temp = arr[j]\n            arr[j] = arr[j + 1]\n            arr[j + 1] = temp\n\n            barsRef.current.childNodes[j].style.backgroundColor = \"blue\"\n            barsRef.current.childNodes[j + 1].style.backgroundColor = \"blue\"\n            setNumbersToSort([...arr])\n          } else {\n            barsRef.current.childNodes[j].style.backgroundColor = \"green\"\n            barsRef.current.childNodes[j + 1].style.backgroundColor = \"green\"\n            await sleep(speed)\n            barsRef.current.childNodes[j].style.backgroundColor = \"blue\"\n            barsRef.current.childNodes[j + 1].style.backgroundColor = \"blue\"\n          }\n        }\n      }\n      setIsSorting(false)\n      setIsSorted(true)\n      for (var index = 0; index < arr.length; index++) {\n        barsRef.current.childNodes[index].style.backgroundColor = \"green\"\n      }\n    }\n  }\n\n\n  //Handles changing the value of the slider\n  const handleLengthChange = (event, newValue) => {\n    for (var i = 0; i < numbersToSort.length; i++) {\n      barsRef.current.childNodes[i].style.backgroundColor = \"blue\"\n    }\n    setLengthOfArray(newValue);\n  };\n\n  // const handleSpeedChange = (event, newValue) => {\n  //   console.log(newValue)\n  //   if (newValue === 1) {\n  //     setSpeed(5000)\n  //   } else if (newValue === 2) {\n  //     setSpeed(2000);\n  //   } else { \n  //     setSpeed(100) \n  //   };\n\n  //   setSpeed(newValue);\n  // };\n\n  return (\n    <div className=\"App\">\n      <button onClick={() => { if (isSorted == false) { bubbleSort(numbersToSort) }; setIsSorting(true) }}>Bubble Sort</button>\n\n      <h1>{lengthOfArray}</h1>\n      {/* <Slider defaultValue={5} aria-label=\"Default\" valueLabelDisplay=\"auto\" onChange={handleSpeedChange} min={1} max={3} /> */}\n      <Slider defaultValue={40} aria-label=\"Default\" valueLabelDisplay=\"auto\" onChange={handleLengthChange} min={20} max={100} />\n\n      {/* Displays list of styled bar's  */}\n      <ul ref={barsRef} style={{ display: \"flex\", justifyContent: \"center\", marginLeft: \"-40px\" }}>\n        {numbersToSort.map((number, index) => (\n          < div key={index} style={{ backgroundColor: 'blue', width: \"15px\", height: `${2 * number}px`, margin: \"2px\" }}></div>\n        ))\n        }\n      </ul >\n\n    </div >\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}